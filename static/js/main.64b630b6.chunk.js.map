{"version":3,"sources":["cersei.jpeg","snow.jpeg","arya.png","barath.png","joffrey.jpeg","sansa.jpeg","wild.jpeg","hound.jpeg","tyrion.jpeg","Scoreboard.js","Card.js","Gameboard.js","images.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Scoreboard","props","react_default","a","createElement","className","state","chosen","length","message","Card","onClick","action","data-img","imgSrc","style","backgroundImage","Gameboard","images","map","image","i","src_Card","key","src_images","cersei","snow","arya","barath","joffrey","sansa","wild","hound","tyrion","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","shuffle","array","j","Math","floor","random","_ref","e","tgt","target","getAttribute","includes","gameOver","setState","concat","toConsumableArray","win","console","log","src_Scoreboard","src_Gameboard","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.64b630b6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cersei.e74166ad.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/snow.d06026a7.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/arya.b6b069e2.png\";","module.exports = __webpack_public_path__ + \"static/media/barath.cc2ef562.png\";","module.exports = __webpack_public_path__ + \"static/media/joffrey.868851c8.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/sansa.cd40eab1.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/wild.d28654a1.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/hound.faf2fa5d.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/tyrion.7c36cfce.jpeg\";","import React from 'react';\nimport './Scoreboard.css';\n\nfunction Scoreboard(props) {\n    return (\n        <div className=\"Scoreboard\">\n            <p className=\"Score\"> score: {props.state.chosen.length}</p>\n            <p className=\"Message\">{props.state.message}</p>\n        </div>\n    );\n}\n\nexport default Scoreboard;\n","import React from 'react';\nimport './Card.css';\n\nfunction Card(props) {\n    return (\n        <div className=\"Card\" onClick={props.action} data-img={props.imgSrc} style={{ backgroundImage: 'url(' + props.imgSrc + ')' }}>\n        </div>\n    );\n}\n\nexport default Card;\n","import React from 'react';\nimport './Gameboard.css';\nimport Card from './Card.js';\n\nfunction Gameboard(props) {\n    return (\n        <div className=\"Gameboard\">\n            {props.images.map((image, i) => (\n                <Card key={i} imgSrc={image} action={props.action} />\n            ))}\n        </div>\n    );\n}\n\nexport default Gameboard;\n","import cersei from './cersei.jpeg';\nimport snow from './snow.jpeg';\nimport arya from './arya.png';\nimport barath from './barath.png';\nimport joffrey from './joffrey.jpeg';\nimport sansa from './sansa.jpeg';\nimport wild from './wild.jpeg';\nimport hound from './hound.jpeg';\nimport tyrion from './tyrion.jpeg';\n\nexport default [cersei, snow, arya, barath, joffrey, sansa, wild, hound, tyrion];","import React from 'react';\nimport './App.css';\nimport Scoreboard from './Scoreboard.js';\nimport Gameboard from './Gameboard.js';\nimport images from './images';\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      chosen: [],\n      message: \"\"\n    };\n  }\n\n  shuffle = (array) => {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n  }\n\n  onClick = (e) => {\n    let tgt = e.target.getAttribute('data-img');\n    if (this.state.chosen.includes(tgt)) {\n      this.gameOver();\n    } else {\n      this.setState({\n        chosen: [...this.state.chosen, tgt],\n        message: \"\"\n      }, () => {\n        if (this.state.chosen.length >= 9) {\n          this.win();\n        }\n      })\n      console.log(this.state.chosen.length)\n    }\n    this.shuffle(images);\n    console.log(this.state.chosen);\n  }\n\n  gameOver = () => {\n    this.setState({\n      chosen: [],\n      message: \"game over\"\n    })\n  }\n\n  win = () => {\n    this.setState({\n      chosen: [],\n      message: \"! You Win !\"\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\" >\n        <Scoreboard state={this.state} />\n        <Gameboard images={images} action={this.onClick} />\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}